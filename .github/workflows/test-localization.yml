# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test localization

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  localization:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # macOS removed due to locale issues
        locale: [
          'fr_FR.UTF-8',    # Uses comma as decimal separator
          'ru_RU.UTF-8'     # Uses comma as decimal, space as thousands
        ]
        python-version: ['3.12']

    name: "Py${{ matrix.python-version }} @ ${{ matrix.locale }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    env:
      PYTHONPATH: ${{ github.workspace }}
      LC_NUMERIC: ${{ matrix.locale }}
      LC_MONETARY: ${{ matrix.locale }}
      LANG: ${{ matrix.locale }}
      LC_ALL: ${{ matrix.locale }}
      PYTHONIOENCODING: utf-8

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          dotnet-quality: "ga"

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Configure Linux locale
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y locales locales-all

          # Generate and configure locales
          sudo locale-gen ${{ matrix.locale }}
          sudo update-locale LANG=${{ matrix.locale }}

          # Set locale in multiple ways to ensure it takes effect
          export LANG=${{ matrix.locale }}
          export LANGUAGE=${{ matrix.locale }}
          export LC_ALL=${{ matrix.locale }}

          # Verify locale installation
          locale -a
          locale

      - name: Configure Windows locale
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $locale = "${{ matrix.locale }}".Split('.')[0].Replace('_', '-')
          [System.Threading.Thread]::CurrentThread.CurrentCulture = [System.Globalization.CultureInfo]::GetCultureInfo($locale)
          [System.Threading.Thread]::CurrentThread.CurrentUICulture = [System.Globalization.CultureInfo]::GetCultureInfo($locale)

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Verify locale
        shell: bash
        run: |
          echo "Current locale settings:"
          locale

          echo -e "\nPython locale test:"
          python -c "
          import locale
          import sys

          print(f'Default encoding: {sys.getdefaultencoding()}')
          print(f'Filesystem encoding: {sys.getfilesystemencoding()}')
          print(f'Locale: {locale.getlocale()}')

          # Try setting the locale explicitly
          try:
              locale.setlocale(locale.LC_ALL, '')
              print(f'Set locale successful: {locale.getlocale()}')
          except locale.Error as e:
              print(f'Failed to set locale: {e}')

          # Test number formatting
          try:
              print(f'Number formatting: {locale.format_string(\"%.2f\", 1234.56)}')
          except Exception as e:
              print(f'Number formatting failed: {e}')

          # Test currency formatting
          try:
              print(f'Currency formatting: {locale.currency(1234.56)}')
          except Exception as e:
              print(f'Currency formatting failed: {e}')
          "

      - name: Run locale tests
        run: pytest -m "localization" -vr A tests --junitxml=test-results.xml

      - uses: test-summary/action@v2
        if: always()
        with:
          paths: test-results.xml
